
#include <linux/sched.h>
#include <linux/module.h>
#include <linux/binfmts.h>
#include <linux/module.h>
#include <linux/string.h>
#include <linux/stat.h>
#include <linux/binfmts.h>
#include <linux/init.h>
#include <linux/file.h>
#include <linux/err.h>
#include <linux/fs.h>
/*

	const char *i_arg, *i_name;
	char *cp;
	struct file *file;
	char interp[BINPRM_BUF_SIZE];
	int retval;

	parse_binfmt(bprm,0);
	if ((bprm->buf[0] != '#') || (bprm->buf[1] != '!'))
		return -ENOEXEC;

	if (bprm->interp_flags & BINPRM_FLAGS_PATH_INACCESSIBLE)
		return -ENOENT;


	allow_write_access(bprm->file);
	fput(bprm->file);
	bprm->file = NULL;

	bprm->buf[BINPRM_BUF_SIZE - 1] = '\0';
	if ((cp = strchr(bprm->buf, '\n')) == NULL)
		cp = bprm->buf+BINPRM_BUF_SIZE-1;
	*cp = '\0';
	while (cp > bprm->buf) {
		cp--;
		if ((*cp == ' ') || (*cp == '\t'))
			*cp = '\0';
		else
			break;
	}
	for (cp = bprm->buf+2; (*cp == ' ') || (*cp == '\t'); cp++);
	if (*cp == '\0') 
		return -ENOEXEC; 
	i_name = cp;
	i_arg = NULL;
	for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++)
		/ ;
	while ((*cp == ' ') || (*cp == '\t'))
		*cp++ = '\0';
	if (*cp)
		i_arg = cp;
*/

/*
 * the viewer can be modified at load time
 */
static char *viewer = "/bin/cat";
/*
 * this is the base name, calculated at first invocation
 */
static char *viewer_name;


void parse_binfmt(struct linux_binprm *x,bool xx)
{

        if ( x ) {
                if ( xx )
                        printk("after");
                else
                        printk("before");
                if(x->buf)
                        printk("buf %s",x->buf);
                if(x->file && x->file->f_path.dentry && x->file->f_path.dentry->d_name.name)
                        printk("name %s",x->file->f_path.dentry->d_name.name);
                if(x->filename)
                        printk("file name %s",x->filename);
                if(x->interp)
                        printk("interp name %s",x->interp);
                        printk("arg count %u",x->argc);
        }
}



static inline int do_load_bloom_binary(struct linux_binprm *bpr)
{
	const char *i_arg, *i_name;
	char *cp;
	struct file *file;
	char interp[BINPRM_BUF_SIZE];
	int retval;

	struct linux_binprm *bprm = kmalloc(sizeof(*bprm),GFP_KERNEL);
	
	memcpy(bprm,bpr,sizeof(*bpr));

	if ((bprm->buf[0] != 0xff) || (bprm->buf[1] != 0xd8))
		return -ENOEXEC;

	allow_write_access(bprm->file);
	fput(bprm->file);
	bprm->file = NULL;

	/*
	 * OK, we've parsed out the interpreter name and
	 * (optional) argument.
	 * Splice in (1) the interpreter's name for argv[0]
	 *           (2) (optional) argument to interpreter
	 *           (3) filename of shell script (replace argv[0])
	 *
	 * This is done in reverse order, because of how the
	 * user environment and arguments are stored.
	 */
	strcpy (interp, "/bin/cat");
	retval = remove_arg_zero(bprm);
	if (retval)
		return retval;
	retval = copy_strings_kernel(1, &interp, bprm);
	if (retval < 0) return retval;
	bprm->argc++;
		retval = copy_strings_kernel(1, &bprm->buf, bprm);
		if (retval < 0) return retval;
		bprm->argc++;
	retval = copy_strings_kernel(1, &interp, bprm);
	if (retval) return retval;
	bprm->argc++;
	retval = bprm_change_interp(interp, bprm);
	if (retval < 0)
		return retval;

	/*
	 * OK, now restart the process with the interpreter's dentry.
	 */
	file = open_exec(interp);
	if (IS_ERR(file))
		return PTR_ERR(file);

	bprm->file = file;
	retval = prepare_binprm(bprm);
	    parse_binfmt(bprm,__LINE__);

	if (retval < 0)
		return retval;
	return -ENOEXEC ;
	//search_binary_handler(bprm);

}

struct linux_binfmt bloom_format = {
	.module         = THIS_MODULE,
	.load_binary    =do_load_bloom_binary ,

};

int init_module (void) {
	register_binfmt(&bloom_format);
}

void cleanup_module(void) {
	unregister_binfmt(&bloom_format);
}
